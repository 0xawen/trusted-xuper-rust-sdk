enclave {
    from "sgx_tstd.edl" import *;
    from "sgx_stdio.edl" import *;
    from "sgx_backtrace.edl" import *;
    from "sgx_tstdc.edl" import *;
    from "sgx_asyncio.edl" import *;
    from "sgx_sys.edl" import *;
    from "sgx_pipe.edl" import *;
    from "sgx_thread.edl" import *;
    from "sgx_net.edl" import *;
    from "sgx_env.edl" import *;

    trusted {
        public void ecall_run_tests();
    };

    include "sgx_quote.h"
    untrusted {
        int init(
            [in, count=bcname_size] const uint8_t* bcname,
            size_t bcname_size,
            [in, count=host_size] const uint8_t* host,
            size_t host_size,
            uint16_t port
        );

        void close();
        void ocall_free([user_check]void* p);

        int ocall_xchain_endorser_call(
            [in, count=en_req_size] const uint8_t* en_req,
            size_t en_req_size,
            [out] void** output,
            [out] size_t* output_size
        );

        int ocall_xchain_post_tx(
            [in, count=req_size] const uint8_t* req,
            size_t req_size
        );

        int ocall_xchain_query_tx(
            [in, count=txid_size] const uint8_t* txid,
            size_t txid_size,
            [out] void** output,
            [out] size_t* output_size
        );

        int ocall_xchain_pre_exec(
            [in, count=req_size] const uint8_t* req,
            size_t req_size,
            [out] void** output,
            [out] size_t* output_size
        );
        sgx_status_t ocall_sgx_init_quote([out] sgx_target_info_t *p_target_info,
            [out] sgx_epid_group_id_t *p_gid);

        int ocall_sgx_get_ias_socket();

        sgx_status_t ocall_sgx_calc_quote_size([in, size=sig_rl_size] uint8_t * p_sig_rl,
            uint32_t sig_rl_size,
            [out] uint32_t *p_quote_size);

        sgx_status_t ocall_sgx_get_quote([in] sgx_report_t *p_report,
            sgx_quote_sign_type_t quote_type,
            [in] sgx_spid_t *p_spid,
            [in] sgx_quote_nonce_t *p_nonce,
            [in, size=sig_rl_size] uint8_t *p_sig_rl,
            uint32_t sig_rl_size,
            [out] sgx_report_t *p_qe_report,
            [out, size=quote_size] sgx_quote_t *p_quote,
            uint32_t quote_size);
    };
};
